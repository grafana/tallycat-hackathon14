/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DataGovernanceTelemetryCatalogRouteImport } from './routes/data-governance/telemetry-catalog'
import { Route as DataGovernanceTelemetryNameRouteImport } from './routes/data-governance/$telemetryName'

const DataGovernanceTelemetryCatalogRoute =
  DataGovernanceTelemetryCatalogRouteImport.update({
    id: '/data-governance/telemetry-catalog',
    path: '/data-governance/telemetry-catalog',
    getParentRoute: () => rootRouteImport,
  } as any)
const DataGovernanceTelemetryNameRoute =
  DataGovernanceTelemetryNameRouteImport.update({
    id: '/data-governance/$telemetryName',
    path: '/data-governance/$telemetryName',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/data-governance/$telemetryName': typeof DataGovernanceTelemetryNameRoute
  '/data-governance/telemetry-catalog': typeof DataGovernanceTelemetryCatalogRoute
}
export interface FileRoutesByTo {
  '/data-governance/$telemetryName': typeof DataGovernanceTelemetryNameRoute
  '/data-governance/telemetry-catalog': typeof DataGovernanceTelemetryCatalogRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/data-governance/$telemetryName': typeof DataGovernanceTelemetryNameRoute
  '/data-governance/telemetry-catalog': typeof DataGovernanceTelemetryCatalogRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/data-governance/$telemetryName'
    | '/data-governance/telemetry-catalog'
  fileRoutesByTo: FileRoutesByTo
  to: '/data-governance/$telemetryName' | '/data-governance/telemetry-catalog'
  id:
    | '__root__'
    | '/data-governance/$telemetryName'
    | '/data-governance/telemetry-catalog'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DataGovernanceTelemetryNameRoute: typeof DataGovernanceTelemetryNameRoute
  DataGovernanceTelemetryCatalogRoute: typeof DataGovernanceTelemetryCatalogRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/data-governance/telemetry-catalog': {
      id: '/data-governance/telemetry-catalog'
      path: '/data-governance/telemetry-catalog'
      fullPath: '/data-governance/telemetry-catalog'
      preLoaderRoute: typeof DataGovernanceTelemetryCatalogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data-governance/$telemetryName': {
      id: '/data-governance/$telemetryName'
      path: '/data-governance/$telemetryName'
      fullPath: '/data-governance/$telemetryName'
      preLoaderRoute: typeof DataGovernanceTelemetryNameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  DataGovernanceTelemetryNameRoute: DataGovernanceTelemetryNameRoute,
  DataGovernanceTelemetryCatalogRoute: DataGovernanceTelemetryCatalogRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
