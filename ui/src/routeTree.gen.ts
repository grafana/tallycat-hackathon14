/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DataGovernanceTelemetryCatalogImport } from './routes/data-governance/telemetry-catalog'
import { Route as DataGovernanceScopeCatalogImport } from './routes/data-governance/scope-catalog'
import { Route as DataGovernanceEntityCatalogImport } from './routes/data-governance/entity-catalog'
import { Route as DataGovernanceTelemetryNameImport } from './routes/data-governance/$telemetryName'

// Create/Update Routes

const DataGovernanceTelemetryCatalogRoute =
  DataGovernanceTelemetryCatalogImport.update({
    id: '/data-governance/telemetry-catalog',
    path: '/data-governance/telemetry-catalog',
    getParentRoute: () => rootRoute,
  } as any)

const DataGovernanceScopeCatalogRoute = DataGovernanceScopeCatalogImport.update(
  {
    id: '/data-governance/scope-catalog',
    path: '/data-governance/scope-catalog',
    getParentRoute: () => rootRoute,
  } as any,
)

const DataGovernanceEntityCatalogRoute =
  DataGovernanceEntityCatalogImport.update({
    id: '/data-governance/entity-catalog',
    path: '/data-governance/entity-catalog',
    getParentRoute: () => rootRoute,
  } as any)

const DataGovernanceTelemetryNameRoute =
  DataGovernanceTelemetryNameImport.update({
    id: '/data-governance/$telemetryName',
    path: '/data-governance/$telemetryName',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/data-governance/$telemetryName': {
      id: '/data-governance/$telemetryName'
      path: '/data-governance/$telemetryName'
      fullPath: '/data-governance/$telemetryName'
      preLoaderRoute: typeof DataGovernanceTelemetryNameImport
      parentRoute: typeof rootRoute
    }
    '/data-governance/entity-catalog': {
      id: '/data-governance/entity-catalog'
      path: '/data-governance/entity-catalog'
      fullPath: '/data-governance/entity-catalog'
      preLoaderRoute: typeof DataGovernanceEntityCatalogImport
      parentRoute: typeof rootRoute
    }
    '/data-governance/scope-catalog': {
      id: '/data-governance/scope-catalog'
      path: '/data-governance/scope-catalog'
      fullPath: '/data-governance/scope-catalog'
      preLoaderRoute: typeof DataGovernanceScopeCatalogImport
      parentRoute: typeof rootRoute
    }
    '/data-governance/telemetry-catalog': {
      id: '/data-governance/telemetry-catalog'
      path: '/data-governance/telemetry-catalog'
      fullPath: '/data-governance/telemetry-catalog'
      preLoaderRoute: typeof DataGovernanceTelemetryCatalogImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/data-governance/$telemetryName': typeof DataGovernanceTelemetryNameRoute
  '/data-governance/entity-catalog': typeof DataGovernanceEntityCatalogRoute
  '/data-governance/scope-catalog': typeof DataGovernanceScopeCatalogRoute
  '/data-governance/telemetry-catalog': typeof DataGovernanceTelemetryCatalogRoute
}

export interface FileRoutesByTo {
  '/data-governance/$telemetryName': typeof DataGovernanceTelemetryNameRoute
  '/data-governance/entity-catalog': typeof DataGovernanceEntityCatalogRoute
  '/data-governance/scope-catalog': typeof DataGovernanceScopeCatalogRoute
  '/data-governance/telemetry-catalog': typeof DataGovernanceTelemetryCatalogRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/data-governance/$telemetryName': typeof DataGovernanceTelemetryNameRoute
  '/data-governance/entity-catalog': typeof DataGovernanceEntityCatalogRoute
  '/data-governance/scope-catalog': typeof DataGovernanceScopeCatalogRoute
  '/data-governance/telemetry-catalog': typeof DataGovernanceTelemetryCatalogRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/data-governance/$telemetryName'
    | '/data-governance/entity-catalog'
    | '/data-governance/scope-catalog'
    | '/data-governance/telemetry-catalog'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/data-governance/$telemetryName'
    | '/data-governance/entity-catalog'
    | '/data-governance/scope-catalog'
    | '/data-governance/telemetry-catalog'
  id:
    | '__root__'
    | '/data-governance/$telemetryName'
    | '/data-governance/entity-catalog'
    | '/data-governance/scope-catalog'
    | '/data-governance/telemetry-catalog'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DataGovernanceTelemetryNameRoute: typeof DataGovernanceTelemetryNameRoute
  DataGovernanceEntityCatalogRoute: typeof DataGovernanceEntityCatalogRoute
  DataGovernanceScopeCatalogRoute: typeof DataGovernanceScopeCatalogRoute
  DataGovernanceTelemetryCatalogRoute: typeof DataGovernanceTelemetryCatalogRoute
}

const rootRouteChildren: RootRouteChildren = {
  DataGovernanceTelemetryNameRoute: DataGovernanceTelemetryNameRoute,
  DataGovernanceEntityCatalogRoute: DataGovernanceEntityCatalogRoute,
  DataGovernanceScopeCatalogRoute: DataGovernanceScopeCatalogRoute,
  DataGovernanceTelemetryCatalogRoute: DataGovernanceTelemetryCatalogRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/data-governance/$telemetryName",
        "/data-governance/entity-catalog",
        "/data-governance/scope-catalog",
        "/data-governance/telemetry-catalog"
      ]
    },
    "/data-governance/$telemetryName": {
      "filePath": "data-governance/$telemetryName.tsx"
    },
    "/data-governance/entity-catalog": {
      "filePath": "data-governance/entity-catalog.tsx"
    },
    "/data-governance/scope-catalog": {
      "filePath": "data-governance/scope-catalog.tsx"
    },
    "/data-governance/telemetry-catalog": {
      "filePath": "data-governance/telemetry-catalog.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
