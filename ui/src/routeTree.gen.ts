/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as DataGovernanceSchemaCatalogImport } from './routes/data-governance/schema-catalog'
import { Route as DataGovernanceTelemetryNameImport } from './routes/data-governance/$telemetryName'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DataGovernanceSchemaCatalogRoute =
  DataGovernanceSchemaCatalogImport.update({
    id: '/data-governance/schema-catalog',
    path: '/data-governance/schema-catalog',
    getParentRoute: () => rootRoute,
  } as any)

const DataGovernanceTelemetryNameRoute =
  DataGovernanceTelemetryNameImport.update({
    id: '/data-governance/$telemetryName',
    path: '/data-governance/$telemetryName',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/data-governance/$telemetryName': {
      id: '/data-governance/$telemetryName'
      path: '/data-governance/$telemetryName'
      fullPath: '/data-governance/$telemetryName'
      preLoaderRoute: typeof DataGovernanceTelemetryNameImport
      parentRoute: typeof rootRoute
    }
    '/data-governance/schema-catalog': {
      id: '/data-governance/schema-catalog'
      path: '/data-governance/schema-catalog'
      fullPath: '/data-governance/schema-catalog'
      preLoaderRoute: typeof DataGovernanceSchemaCatalogImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/data-governance/$telemetryName': typeof DataGovernanceTelemetryNameRoute
  '/data-governance/schema-catalog': typeof DataGovernanceSchemaCatalogRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/data-governance/$telemetryName': typeof DataGovernanceTelemetryNameRoute
  '/data-governance/schema-catalog': typeof DataGovernanceSchemaCatalogRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/data-governance/$telemetryName': typeof DataGovernanceTelemetryNameRoute
  '/data-governance/schema-catalog': typeof DataGovernanceSchemaCatalogRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/data-governance/$telemetryName'
    | '/data-governance/schema-catalog'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/data-governance/$telemetryName'
    | '/data-governance/schema-catalog'
  id:
    | '__root__'
    | '/'
    | '/data-governance/$telemetryName'
    | '/data-governance/schema-catalog'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DataGovernanceTelemetryNameRoute: typeof DataGovernanceTelemetryNameRoute
  DataGovernanceSchemaCatalogRoute: typeof DataGovernanceSchemaCatalogRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DataGovernanceTelemetryNameRoute: DataGovernanceTelemetryNameRoute,
  DataGovernanceSchemaCatalogRoute: DataGovernanceSchemaCatalogRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/data-governance/$telemetryName",
        "/data-governance/schema-catalog"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/data-governance/$telemetryName": {
      "filePath": "data-governance/$telemetryName.tsx"
    },
    "/data-governance/schema-catalog": {
      "filePath": "data-governance/schema-catalog.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
