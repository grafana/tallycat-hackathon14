import type { TelemetryItem } from '@/types/telemetry'

export const mockTelemetryItems: TelemetryItem[] = [
  {
    id: "telemetry-001",
    name: "http.server.request.duration",
    type: "metric",
    dataType: "histogram",
    status: "active",
    description: "Measures the duration of HTTP server requests in milliseconds",
    lastUpdated: "2023-11-15T10:30:00Z",
    fields: 24,
    source: "OpenTelemetry Collector",
    instrumentationLibrary: "opentelemetry-js",
    format: "OTLP",
    unit: "ms",
    aggregation: "cumulative",
    cardinality: "high",
    tags: ["http", "server", "duration", "request"],
  },
  {
    id: "telemetry-002",
    name: "system.logs",
    type: "log",
    dataType: "structured",
    status: "active",
    description: "System-level logs capturing OS events, service starts/stops, and system errors",
    lastUpdated: "2023-11-10T14:45:00Z",
    fields: 18,
    source: "Fluentd",
    instrumentationLibrary: "fluentd-logger",
    format: "JSON",
    severity: "multi-level",
    cardinality: "medium",
    tags: ["system", "os", "events"],
  },
  {
    id: "telemetry-003",
    name: "api.request.trace",
    type: "trace",
    dataType: "span",
    status: "active",
    description: "Distributed tracing data for API requests across microservices",
    lastUpdated: "2023-11-12T09:15:00Z",
    fields: 32,
    source: "OpenTelemetry Collector",
    instrumentationLibrary: "opentelemetry-java",
    format: "OTLP",
    spanKind: "server",
    cardinality: "high",
    tags: ["api", "request", "trace", "distributed"],
  },
  {
    id: "telemetry-004",
    name: "db.query.duration",
    type: "metric",
    dataType: "histogram",
    status: "active",
    description: "Database query execution time in milliseconds",
    lastUpdated: "2023-11-08T16:20:00Z",
    fields: 29,
    source: "OpenTelemetry Collector",
    instrumentationLibrary: "opentelemetry-js",
    format: "OTLP",
    unit: "ms",
    aggregation: "delta",
    cardinality: "high",
    tags: ["database", "query", "duration", "sql"],
  },
  {
    id: "telemetry-005",
    name: "frontend.user.events",
    type: "log",
    dataType: "structured",
    status: "draft",
    description: "User interaction events from the frontend application",
    lastUpdated: "2023-11-05T11:10:00Z",
    fields: 15,
    source: "OpenTelemetry Collector",
    instrumentationLibrary: "opentelemetry-js",
    format: "OTLP",
    severity: "info",
    cardinality: "high",
    tags: ["frontend", "user", "events", "interaction"],
  },
  {
    id: "telemetry-006",
    name: "payment.processing.trace",
    type: "trace",
    dataType: "span",
    status: "active",
    description: "End-to-end traces of payment processing workflows",
    lastUpdated: "2023-11-01T13:25:00Z",
    fields: 41,
    source: "OpenTelemetry Collector",
    instrumentationLibrary: "opentelemetry-java",
    format: "OTLP",
    spanKind: "consumer",
    cardinality: "medium",
    tags: ["payment", "processing", "trace", "workflow"],
  },
  {
    id: "telemetry-007",
    name: "system.cpu.utilization",
    type: "metric",
    dataType: "gauge",
    status: "deprecated",
    description: "CPU utilization percentage across the system",
    lastUpdated: "2023-10-20T08:40:00Z",
    fields: 22,
    source: "Prometheus",
    instrumentationLibrary: "node-exporter",
    format: "Prometheus",
    unit: "percentage",
    aggregation: "latest",
    cardinality: "low",
    tags: ["system", "cpu", "utilization", "infrastructure"],
  },
] 